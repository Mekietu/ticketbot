const { SlashCommandBuilder, EmbedBuilder, StringSelectMenuBuilder, StringSelectMenuOptionBuilder, ActionRowBuilder, PermissionFlagsBits } = require('discord.js');
const db = require('../config/database');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('ticketsetup')
        .setDescription('Configurer le syst√®me de tickets')
        .addChannelOption(option =>
            option.setName('channel')
                .setDescription('Le salon o√π envoyer le message de ticket')
                .setRequired(true))
        .addChannelOption(option =>
            option.setName('logchannel')
                .setDescription('Le salon o√π envoyer les logs des tickets')
                .setRequired(true))
        .addRoleOption(option =>
            option.setName('staffrole')
                .setDescription('Le r√¥le du staff qui aura acc√®s aux tickets')
                .setRequired(true))
        .addChannelOption(option =>
            option.setName('category')
                .setDescription('La cat√©gorie o√π les tickets seront cr√©√©s'))
        .addIntegerOption(option =>
            option.setName('maxtickets')
                .setDescription('Nombre maximum de tickets par utilisateur')
                .setMinValue(1)
                .setMaxValue(10))
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),
    async execute(interaction) {
        const channel = interaction.options.getChannel('channel');
        const logChannel = interaction.options.getChannel('logchannel');
        const staffRole = interaction.options.getRole('staffrole');
        const category = interaction.options.getChannel('category') || null;
        const maxTickets = interaction.options.getInteger('maxtickets') || 3;

        // V√©rifier que le bot a les permissions n√©cessaires dans les salons
        if (!channel.permissionsFor(interaction.guild.members.me).has([PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages])) {
            return interaction.reply({ content: 'Je n\'ai pas les permissions n√©cessaires pour envoyer des messages dans le salon sp√©cifi√©.', ephemeral: true });
        }
        if (!logChannel.permissionsFor(interaction.guild.members.me).has([PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages])) {
            return interaction.reply({ content: 'Je n\'ai pas les permissions n√©cessaires pour envoyer des messages dans le salon de logs.', ephemeral: true });
        }

        // Enregistrer la configuration dans la base de donn√©es
        db.prepare('INSERT OR REPLACE INTO config (guildId, ticketChannelId, logChannelId, staffRoleId, categoryId, maxTickets) VALUES (?, ?, ?, ?, ?, ?)')
            .run(interaction.guild.id, channel.id, logChannel.id, staffRole.id, category ? category.id : null, maxTickets);

        // Cr√©er le menu d√©roulant avec les options personnalis√©es
        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('ticket_create')
            .setPlaceholder('S√©lectionnez une option...')
            .addOptions([
                new StringSelectMenuOptionBuilder()
                    .setLabel('Candidature RP')
                    .setValue('candidature_rp')
                    .setDescription('Postez votre candidature RP d√®s-maintenant...')
                    .setEmoji('üìú'),
                new StringSelectMenuOptionBuilder()
                    .setLabel('Candidature Staff')
                    .setValue('candidature_staff')
                    .setDescription('Postez votre candidature Staff d√®s-maintenant...')
                    .setEmoji('üìã'),
                new StringSelectMenuOptionBuilder()
                    .setLabel('Plainte Staff')
                    .setValue('plainte_staff')
                    .setDescription('Signalez un probl√®me avec le staff...')
                    .setEmoji('üì¢'),
                new StringSelectMenuOptionBuilder()
                    .setLabel('Bug IG')
                    .setValue('bug_ig')
                    .setDescription('Signalez un bug critique en jeu...')
                    .setEmoji('‚öôÔ∏è'),
                new StringSelectMenuOptionBuilder()
                    .setLabel('Boutique')
                    .setValue('boutique')
                    .setDescription('Probl√®me ou question sur la boutique...')
                    .setEmoji('üí∞'),
                new StringSelectMenuOptionBuilder()
                    .setLabel('Collaborations')
                    .setValue('collaborations')
                    .setDescription('Notre projet vous int√©resse...')
                    .setEmoji('‚≠ê'),
                new StringSelectMenuOptionBuilder()
                    .setLabel('Autre(s)')
                    .setValue('autre')
                    .setDescription('Pour toutes autres questions...')
                    .setEmoji('üé´'),
            ]);

        const row = new ActionRowBuilder().addComponents(selectMenu);

        // Cr√©er l'embed
        const embed = new EmbedBuilder()
            .setTitle('üé´ Syst√®me de Tickets')
            .setDescription('S√©lectionnez une option ci-dessous pour ouvrir un ticket.')
            .setColor('#00FF00');

        // Envoyer le message dans le salon sp√©cifi√©
        try {
            await channel.send({ embeds: [embed], components: [row] });
            await interaction.reply({ content: 'Syst√®me de tickets configur√© avec succ√®s !', ephemeral: true });
        } catch (error) {
            console.error('Erreur lors de l\'envoi du message de ticket :', error);
            await interaction.reply({ content: 'Une erreur est survenue lors de la configuration du syst√®me de tickets.', ephemeral: true });
        }
    },
};